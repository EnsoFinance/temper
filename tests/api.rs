use std::{fs::File, sync::Arc};

use dashmap::DashMap;
use enso_temper::{
    config::{config, Config},
    errors::{handle_rejection, ErrorMessage},
    simulate_routes,
    simulation::{
        SimulationRequest, SimulationResponse, StatefulSimulationEndResponse,
        StatefulSimulationResponse,
    },
    SharedSimulationState,
};
use ethers::types::U256;
use warp::Filter;

fn filter(
    config: Config,
) -> impl Filter<Extract = (impl warp::Reply,), Error = std::convert::Infallible> + Clone {
    let shared_state: Arc<SharedSimulationState> = Arc::new(SharedSimulationState {
        evms: Arc::new(DashMap::new()),
    });

    warp::any()
        .and(simulate_routes(config, shared_state))
        .recover(handle_rejection)
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_file() {
    if config().etherscan_key.is_some() {
        eprintln!("etherscan_key is some, skipping test");
        return;
    }

    let filter = filter(config());

    let file = File::open("tests/body.json").expect("file should open read only");
    let json: SimulationRequest =
        serde_json::from_reader(file).expect("file should be proper JSON");

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    // Uncomment to create new file, if you've made changes to the expected response
    // let mut file = File::create("tests/expected.json").expect("file should open write only");
    // file.write_all(res.body()).expect("file should be written");

    let body: SimulationResponse = serde_json::from_slice(res.body()).unwrap();

    let file = File::open("tests/expected.json").expect("file should open read only");
    let expected: SimulationResponse =
        serde_json::from_reader(file).expect("file should be proper JSON");

    assert_eq!(body, expected);
}

/// The difference between this test and `post_simulate_file` is that this one checks against
/// a file which has the Etherscan decoded traces included. Therefore, the etherscan_key must be set
/// also when running tests to get the same output. If not, it's skipped.
#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_file_etherscan() {
    if config().etherscan_key.is_none() {
        eprintln!("etherscan_key is none, skipping test");
        return;
    }

    let filter = filter(config());

    let file = File::open("tests/body.json").expect("file should open read only");
    let json: SimulationRequest =
        serde_json::from_reader(file).expect("file should be proper JSON");

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    // Uncomment to create new file, if you've made changes to the expected response
    // let mut file = File::create("tests/expected_etherscan.json").expect("file should open write only");
    // file.write_all(res.body()).expect("file should be written");

    let body: SimulationResponse = serde_json::from_slice(res.body()).unwrap();

    let file = File::open("tests/expected_etherscan.json").expect("file should open read only");
    let expected: SimulationResponse =
        serde_json::from_reader(file).expect("file should be proper JSON");

    assert_eq!(body, expected);
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_frax_tx() {
    let filter = filter(config());

    let json = serde_json::json!({
      "chainId": 1,
      "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
      "to": "0x7fEA6786D291A87fC4C98aFCCc5A5d3cFC36bc7b",
      "data": "0xffa2ca3b0f4966e1b9f615aadc207635e8eb08111d2d98aa7d136d3d5df19c7aa33ca711000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000b70a082310100ffffffffff05853d955acef822db058eb8505911ed77f175b99e19198595a30182ffffffffffdef1c0ded9bec7f1a1670819833240f027b25eff70a082310100ffffffffff02853d955acef822db058eb8505911ed77f175b99eb67d77c5010205ffffffff02742f2c5d96c0858d00860039c22d2805bed420e870a082310100ffffffffff05a1d100a5bf6bfd2736837c97248853d989a9ed84095ea7b3010302ffffffffff853d955acef822db058eb8505911ed77f175b99e6e553f65010200ffffffffffa1d100a5bf6bfd2736837c97248853d989a9ed8470a082310100ffffffffff00a1d100a5bf6bfd2736837c97248853d989a9ed84b67d77c5010005ffffffff00742f2c5d96c0858d00860039c22d2805bed420e86e7a43a3010004ffffffff007e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c59120100ffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000089ba58cc0e8bcbc1108dbd6f33356a136a021c6200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000001283598d8ab0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000391092bef5e49bed17d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000064853d955acef822db058eb8505911ed77f175b99e000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000368e8ed73d64232e820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a1d100a5bf6bfd2736837c97248853d989a9ed84000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": 5000000,
      "value": "10000000000000000000",
      "blockNumber": 16927538,
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: SimulationResponse = serde_json::from_slice(res.body()).unwrap();

    assert!(body.success);
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_zerox_swap() {
    let filter = filter(config());

    let json = serde_json::json!({
      "chainId": 1,
      "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
      "to": "0x7fEA6786D291A87fC4C98aFCCc5A5d3cFC36bc7b",
      "data": "0xffa2ca3b6ffd0add426dda56ed56d07c2a70895c0b20f7fe207076f2876a55801a216143000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000b70a082310100ffffffffff056b175474e89094c44da98b954eedeac495271d0f19198595a30182ffffffffffdef1c0ded9bec7f1a1670819833240f027b25eff70a082310100ffffffffff026b175474e89094c44da98b954eedeac495271d0fb67d77c5010205ffffffff02742f2c5d96c0858d00860039c22d2805bed420e870a082310100ffffffffff05bcb91e0b4ad56b0d41e0c168e3090361c0039abc095ea7b3010302ffffffffff6b175474e89094c44da98b954eedeac495271d0f6e553f65010200ffffffffffbcb91e0b4ad56b0d41e0c168e3090361c0039abc70a082310100ffffffffff00bcb91e0b4ad56b0d41e0c168e3090361c0039abcb67d77c5010005ffffffff00742f2c5d96c0858d00860039c22d2805bed420e86e7a43a3010004ffffffff007e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c59120100ffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000089ba58cc0e8bcbc1108dbd6f33356a136a021c620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000128d9627aa40000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000097056cc52be90af6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000007b1bb82fb4642479d10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000bcb91e0b4ad56b0d41e0c168e3090361c0039abc000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": 5000000,
      "value": "100000000000000000",
      "blockNumber": 16934525
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: SimulationResponse = serde_json::from_slice(res.body()).unwrap();

    assert!(body.success);
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_access_lists() {
    let simulate_gas_used = |access_list: serde_json::Value| async move {
        let filter = filter(config());

        let json = serde_json::json!({
          "chainId": 1,
          "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "to": "0x0000000000000000000000000000000000000000",
          "gasLimit": 50000,
          "accessList": access_list,
        });

        let res = warp::test::request()
            .method("POST")
            .path("/simulate")
            .json(&json)
            .reply(&filter)
            .await;

        assert_eq!(res.status(), 200);

        serde_json::from_slice::<SimulationResponse>(res.body())
            .unwrap()
            .gas_used
    };

    const TX_COST: u64 = 21_000;
    const ADDRESS_COST: u64 = 2400;
    const STORAGE_KEY_COST: u64 = 1900;

    assert_eq!(simulate_gas_used(serde_json::json!([])).await, TX_COST);
    assert_eq!(
        simulate_gas_used(serde_json::json!([
          {
            "address": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
            "storageKeys": [],
          },
          {
            "address": "0xDEf1CA1fb7FBcDC777520aa7f396b4E015F497aB",
            "storageKeys": [
              "0xfca351f4d96129454cfc8ef7930b638ac71fea35eb69ee3b8d959496beb04a33",
              "0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x0000000000000000000000000000000000000000000000000000000000000001",
            ],
          },
        ]))
        .await,
        TX_COST + ADDRESS_COST * 2 + STORAGE_KEY_COST * 3,
    );
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_state_overrides() {
    let filter = filter(config());

    let json = serde_json::json!({
      "chainId": 1,
      "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
      "to": "0xDEf1CA1fb7FBcDC777520aa7f396b4E015F497aB",
      "data": "0x70a08231000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045",
      "gasLimit": 5000000,
      "stateOverrides": {
        "0xDEf1CA1fb7FBcDC777520aa7f396b4E015F497aB": {
          "stateDiff": {
            "0xfca351f4d96129454cfc8ef7930b638ac71fea35eb69ee3b8d959496beb04a33":
              "123456789012345678901234567890"
          }
        }
      }
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: SimulationResponse = serde_json::from_slice(res.body()).unwrap();
    let result = U256::from_big_endian(&body.return_data);

    assert_eq!(result.as_u128(), 123456789012345678901234567890);
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_bundle_single_zerox_swap() {
    let filter = filter(config());

    let json = serde_json::json!([{
      "chainId": 1,
      "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
      "to": "0x7fEA6786D291A87fC4C98aFCCc5A5d3cFC36bc7b",
      "data": "0xffa2ca3b6ffd0add426dda56ed56d07c2a70895c0b20f7fe207076f2876a55801a216143000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000b70a082310100ffffffffff056b175474e89094c44da98b954eedeac495271d0f19198595a30182ffffffffffdef1c0ded9bec7f1a1670819833240f027b25eff70a082310100ffffffffff026b175474e89094c44da98b954eedeac495271d0fb67d77c5010205ffffffff02742f2c5d96c0858d00860039c22d2805bed420e870a082310100ffffffffff05bcb91e0b4ad56b0d41e0c168e3090361c0039abc095ea7b3010302ffffffffff6b175474e89094c44da98b954eedeac495271d0f6e553f65010200ffffffffffbcb91e0b4ad56b0d41e0c168e3090361c0039abc70a082310100ffffffffff00bcb91e0b4ad56b0d41e0c168e3090361c0039abcb67d77c5010005ffffffff00742f2c5d96c0858d00860039c22d2805bed420e86e7a43a3010004ffffffff007e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c59120100ffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000089ba58cc0e8bcbc1108dbd6f33356a136a021c620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000128d9627aa40000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000097056cc52be90af6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000007b1bb82fb4642479d10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000bcb91e0b4ad56b0d41e0c168e3090361c0039abc000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": 5000000,
      "value": "100000000000000000",
      "blockNumber": 16934525
    }]);

    let res = warp::test::request()
        .method("POST")
        .path("/simulate-bundle")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: Vec<SimulationResponse> = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(body.len(), 1);
    assert!(body[0].success);
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_bundle() {
    let filter = filter(config());

    let json = serde_json::json!([{
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
      "data": "0x095ea7b300000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b00000000000000000000000000000000000000000000000000000000010e3b75",
      "gasLimit": 5000000,
      "blockNumber": 16976359,
    }, {
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0x60f727bdead2ce49b00f2a2133fc707b931d130b",
      "data": "0x8fd8d1bb5ba86686a0554b3441d6dd4921c1f23dc8caac3b4e51d64f338c379a1f02385500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000c23b872dd01000102ffffffffa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48f8b2cb4f0101ffffffffff027e7d64d987cab6eed08a191c4c2459daf2f8ed0b095ea7b3010304ffffffffffa0b86991c6218b36c1d19d4a2e9eb0ce3606eb4819198595a185ffffffffffffdef1c0ded9bec7f1a1670819833240f027b25efff8b2cb4f0101ffffffffff057e7d64d987cab6eed08a191c4c2459daf2f8ed0bb67d77c5010502ffffffffff742f2c5d96c0858d00860039c22d2805bed420e870a082310101ffffffffff02ae7ab96520de3a18e5e111b5eaab095312d7fe84a1903eab030506ffffffffffae7ab96520de3a18e5e111b5eaab095312d7fe8470a082310101ffffffffff01ae7ab96520de3a18e5e111b5eaab095312d7fe84b67d77c5010102ffffffff01742f2c5d96c0858d00860039c22d2805bed420e86e7a43a3010107ffffffff017e7d64d987cab6eed08a191c4c2459daf2f8ed0b241c59120101ffffffffffff7e7d64d987cab6eed08a191c4c2459daf2f8ed0b000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000093621dca56fe26cdee86e4f6b18e116e9758ff11000000000000000000000000000000000000000000000000000000000000002000000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000007581cd0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000010e3b750000000000000000000000000000000000000000000000000000000000000128d9627aa4000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000010e3b750000000000000000000000000000000000000000000000000020ba4479f1613100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000005931ace2d8642c3fd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001",
      "gasLimit": 5000000,
      "blockNumber": 16976359,
    }]);

    let res = warp::test::request()
        .method("POST")
        .path("/simulate-bundle")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: Vec<SimulationResponse> = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(body.len(), 2);
    assert!(body[0].success);
    assert!(body[1].success);
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_bundle_second_reverts() {
    let filter = filter(config());

    let json = serde_json::json!([{
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0xdac17f958d2ee523a2206206994597c13d831ec7",
      "data": "0x095ea7b300000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b0000000000000000000000000000000000000000000000000000000000989680",
      "gasLimit": 5000000,
      "blockNumber": 16968595,
    }, {
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0x60f727bdead2ce49b00f2a2133fc707b931d130b",
      "data": "0x8fd8d1bbffc9011b73f477fef5d4ebdd0903025283464275113654045eef0ce1ba22ccea000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000006f8b2cb4f0100ffffffffff057e7d64d987cab6eed08a191c4c2459daf2f8ed0b095ea7b3010102ffffffffffdac17f958d2ee523a2206206994597c13d831ec719198595a183ffffffffffffdef1c0ded9bec7f1a1670819833240f027b25efff8b2cb4f0100ffffffffff007e7d64d987cab6eed08a191c4c2459daf2f8ed0bb67d77c5010005ffffffff00742f2c5d96c0858d00860039c22d2805bed420e8a1903eab030004ffffffffffae7ab96520de3a18e5e111b5eaab095312d7fe84000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000128d9627aa40000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000130e53e715e8a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000cef2d4383a642acb0d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": 5000000,
      "blockNumber": 16968595,
    }]);

    let res = warp::test::request()
        .method("POST")
        .path("/simulate-bundle")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: Vec<SimulationResponse> = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(body.len(), 2);
    assert!(body[0].success);
    assert!(!body[1].success);
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_no_data() {
    let filter = filter(config());

    let json = serde_json::json!({
      "chainId": 1,
      "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
      "to": "0x95222290dd7278aa3ddd389cc1e1d165cc4bafe5",
      "gasLimit": 21000,
      "value": "100000",
      "blockNumber": 16784600
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: SimulationResponse = serde_json::from_slice(res.body()).unwrap();

    assert!(body.success);
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_incorrect_chain_id() {
    temp_env::async_with_vars([("FORK_URL", Some("https://eth.llamarpc.com"))], async {
        let filter = filter(config());

        let json = serde_json::json!({
          "chainId": 137,
          "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "to": "0x95222290dd7278aa3ddd389cc1e1d165cc4bafe5",
          "gasLimit": 21000,
          "value": "100000",
          "blockNumber": 16784600
        });

        let res = warp::test::request()
            .method("POST")
            .path("/simulate")
            .json(&json)
            .reply(&filter)
            .await;

        assert_eq!(res.status(), 400);

        let body: ErrorMessage = serde_json::from_slice(res.body()).unwrap();

        assert_eq!(body.message, "INCORRECT_CHAIN_ID".to_string());
    })
    .await;
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_not_enough_gas() {
    let filter = filter(config());

    let json = serde_json::json!({
      "chainId": 1,
      "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
      "to": "0x66fc62c1748e45435b06cf8dd105b73e9855f93e",
      "gasLimit": 20000,
      "value": "100000",
      "blockNumber": 16784600
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 400);

    let body: ErrorMessage = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(body.message, "OUT_OF_GAS".to_string());
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_invalid_from() {
    let filter = filter(config());

    let json = serde_json::json!({
      "chainId": 1,
      "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA9604",
      "to": "0x66fc62c1748e45435b06cf8dd105b73e9855f93e",
      "data": "0xffa2ca3b44eea7c8e659973cbdf476546e9e6adfd1c580700537e52ba7124933a97904ea000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001d0e30db00300ffffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000186a0",
      "gasLimit": 500000,
      "value": "100000",
      "blockNumber": 16784600
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 400);

    let body: ErrorMessage = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(body.message, "BAD REQUEST: invalid length 39, expected a (both 0x-prefixed or not) hex string or byte array containing 20 bytes at line 1 column 63".to_string());
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_invalid_to() {
    let filter = filter(config());

    let json = serde_json::json!({
      "chainId": 1,
      "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
      "to": "0x66fc62c1748e45435b06cf8dd105b73e9855f93",
      "data": "0xffa2ca3b44eea7c8e659973cbdf476546e9e6adfd1c580700537e52ba7124933a97904ea000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001d0e30db00300ffffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000186a0",
      "gasLimit": 500000,
      "value": "100000",
      "blockNumber": 16784600
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 400);

    let body: ErrorMessage = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(body.message, "BAD REQUEST: invalid length 39, expected a (both 0x-prefixed or not) hex string or byte array containing 20 bytes at line 1 column 113".to_string());
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_invalid_data() {
    let filter = filter(config());

    let json = serde_json::json!({
      "chainId": 1,
      "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
      "to": "0x66fc62c1748e45435b06cf8dd105b73e9855f93e",
      "data": "0xffa2ca3b44eea7c8e659973cbdf476546e9e6adfd1c580700537e52ba7124933a97904ea000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001d0e30db00300ffffffffffffc02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000186a",
      "gasLimit": 500000,
      "value": "100000",
      "blockNumber": 16784600
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 400);

    let body: ErrorMessage = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(
        body.message,
        "BAD REQUEST: Odd number of digits at line 1 column 709".to_string()
    );
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_bundle_multiple_block_numbers() {
    let filter = filter(config());

    let json = serde_json::json!([{
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0xdac17f958d2ee523a2206206994597c13d831ec7",
      "data": "0x095ea7b300000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b0000000000000000000000000000000000000000000000000000000000989680",
      "gasLimit": 5000000,
      "blockNumber": 16968595,
    }, {
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0x60f727bdead2ce49b00f2a2133fc707b931d130b",
      "data": "0x8fd8d1bbffc9011b73f477fef5d4ebdd0903025283464275113654045eef0ce1ba22ccea000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000006f8b2cb4f0100ffffffffff057e7d64d987cab6eed08a191c4c2459daf2f8ed0b095ea7b3010102ffffffffffdac17f958d2ee523a2206206994597c13d831ec719198595a183ffffffffffffdef1c0ded9bec7f1a1670819833240f027b25efff8b2cb4f0100ffffffffff007e7d64d987cab6eed08a191c4c2459daf2f8ed0bb67d77c5010005ffffffff00742f2c5d96c0858d00860039c22d2805bed420e8a1903eab030004ffffffffffae7ab96520de3a18e5e111b5eaab095312d7fe84000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000128d9627aa40000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000130e53e715e8a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000cef2d4383a642acb0d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": 5000000,
      "blockNumber": 16968596,
    },
    {
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0x7E7d64D987cAb6EeD08A191C4C2459dAF2f8ED0B",
      "data": "0x796b89b9",
      "gasLimit": 5000000,
      "blockNumber": 16968597,
    },
    {
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0x7E7d64D987cAb6EeD08A191C4C2459dAF2f8ED0B",
      "data": "0x796b89b9",
      "gasLimit": 5000000,
      "blockNumber": 16968598,
    }]);

    let res = warp::test::request()
        .method("POST")
        .path("/simulate-bundle")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: Vec<SimulationResponse> = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(body.len(), 4);
    assert!(body[0].success);
    assert!(!body[1].success);
    assert!(body[2].success);
    assert!(body[3].success);

    assert_eq!(body[0].block_number, 16968595);
    assert_eq!(body[1].block_number, 16968596);
    assert_eq!(body[2].block_number, 16968597);
    assert_eq!(body[3].block_number, 16968598);

    assert_eq!(
        U256::from(body[2].return_data.0.to_vec().as_slice()),
        U256::from(1680526127)
    );
    assert_eq!(
        U256::from(body[3].return_data.0.to_vec().as_slice()),
        U256::from(1680526127 + 12)
    );
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_bundle_multiple_block_numbers_invalid_order() {
    let filter = filter(config());

    let json = serde_json::json!([{
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0xdac17f958d2ee523a2206206994597c13d831ec7",
      "data": "0x095ea7b300000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b0000000000000000000000000000000000000000000000000000000000989680",
      "gasLimit": 5000000,
      "blockNumber": 16968597,
    }, {
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0x60f727bdead2ce49b00f2a2133fc707b931d130b",
      "data": "0x8fd8d1bbffc9011b73f477fef5d4ebdd0903025283464275113654045eef0ce1ba22ccea000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000006f8b2cb4f0100ffffffffff057e7d64d987cab6eed08a191c4c2459daf2f8ed0b095ea7b3010102ffffffffffdac17f958d2ee523a2206206994597c13d831ec719198595a183ffffffffffffdef1c0ded9bec7f1a1670819833240f027b25efff8b2cb4f0100ffffffffff007e7d64d987cab6eed08a191c4c2459daf2f8ed0bb67d77c5010005ffffffff00742f2c5d96c0858d00860039c22d2805bed420e8a1903eab030004ffffffffffae7ab96520de3a18e5e111b5eaab095312d7fe84000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000128d9627aa40000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000130e53e715e8a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000cef2d4383a642acb0d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": 5000000,
      "blockNumber": 16968596,
    }]);

    let res = warp::test::request()
        .method("POST")
        .path("/simulate-bundle")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 400);

    let body: ErrorMessage = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(body.message, "INVALID_BLOCK_NUMBERS".to_string());
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_stateful() {
    let filter = filter(config());

    let new_simulation_req = serde_json::json!({
        "chainId": 1,
        "gasLimit": 5000000,
        "blockNumber": 16968594,
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate-stateful")
        .json(&new_simulation_req)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let simulation_response_body: StatefulSimulationResponse =
        serde_json::from_slice(res.body()).unwrap();
    assert_eq!(
        simulation_response_body
            .stateful_simulation_id
            .to_string()
            .len(),
        36
    );

    let first_request = serde_json::json!([{
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0xdac17f958d2ee523a2206206994597c13d831ec7",
      "data": "0x095ea7b300000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b0000000000000000000000000000000000000000000000000000000000989680",
      "gasLimit": 5000000,
      "blockNumber": 16968595,
    }, {
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0x60f727bdead2ce49b00f2a2133fc707b931d130b",
      "data": "0x8fd8d1bbffc9011b73f477fef5d4ebdd0903025283464275113654045eef0ce1ba22ccea000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000006f8b2cb4f0100ffffffffff057e7d64d987cab6eed08a191c4c2459daf2f8ed0b095ea7b3010102ffffffffffdac17f958d2ee523a2206206994597c13d831ec719198595a183ffffffffffffdef1c0ded9bec7f1a1670819833240f027b25efff8b2cb4f0100ffffffffff007e7d64d987cab6eed08a191c4c2459daf2f8ed0bb67d77c5010005ffffffff00742f2c5d96c0858d00860039c22d2805bed420e8a1903eab030004ffffffffffae7ab96520de3a18e5e111b5eaab095312d7fe84000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000060f727bdead2ce49b00f2a2133fc707b931d130b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000128d9627aa40000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000130e53e715e8a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000cef2d4383a642acb0d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": 5000000,
      "blockNumber": 16968596,
    }]);

    let res = warp::test::request()
        .method("POST")
        .path(
            format!(
                "/simulate-stateful/{}",
                simulation_response_body.stateful_simulation_id
            )
            .as_str(),
        )
        .json(&first_request)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: Vec<SimulationResponse> = serde_json::from_slice(res.body()).unwrap();

    assert_eq!(body.len(), 2);
    assert!(body[0].success);
    assert!(!body[1].success);

    assert_eq!(body[0].block_number, 16968595);
    assert_eq!(body[1].block_number, 16968596);

    let second_request = serde_json::json!([{
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0x7E7d64D987cAb6EeD08A191C4C2459dAF2f8ED0B",
      "data": "0x796b89b9",
      "gasLimit": 5000000,
      "blockNumber": 16968597,
    },
    {
      "chainId": 1,
      "from": "0x93621dca56fe26cdee86e4f6b18e116e9758ff11",
      "to": "0x7E7d64D987cAb6EeD08A191C4C2459dAF2f8ED0B",
      "data": "0x796b89b9",
      "gasLimit": 5000000,
      "blockNumber": 16968598,
    }]);

    let res = warp::test::request()
        .method("POST")
        .path(
            format!(
                "/simulate-stateful/{}",
                simulation_response_body.stateful_simulation_id
            )
            .as_str(),
        )
        .json(&second_request)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: Vec<SimulationResponse> = serde_json::from_slice(res.body()).unwrap();
    assert_eq!(body.len(), 2);

    assert!(body[0].success);
    assert!(body[1].success);
    assert_eq!(body[0].block_number, 16968597);
    assert_eq!(body[1].block_number, 16968598);

    assert_eq!(
        U256::from(body[0].return_data.0.to_vec().as_slice()),
        U256::from(1680526127)
    );
    assert_eq!(
        U256::from(body[1].return_data.0.to_vec().as_slice()),
        U256::from(1680526127 + 12)
    );

    let res = warp::test::request()
        .method("DELETE")
        .path(
            format!(
                "/simulate-stateful/{}",
                simulation_response_body.stateful_simulation_id
            )
            .as_str(),
        )
        .reply(&filter)
        .await;
    assert_eq!(res.status(), 200);
    let body: StatefulSimulationEndResponse = serde_json::from_slice(res.body()).unwrap();
    assert!(body.success);

    let res = warp::test::request()
        .method("DELETE")
        .path("/simulate-stateful/6f676bc7-3416-4647-99ee-e1be90fb6d2e")
        .reply(&filter)
        .await;
    assert_eq!(res.status(), 404);
}

#[tokio::test(flavor = "multi_thread")]
async fn post_simulate_time_sensitive_tx() {
    let config = Config {
        max_request_size: 64 * 1024,
        ..config()
    };
    let filter = filter(config);

    let mut json = serde_json::json!({
      "chainId": 1,
      "from": "0x16c473448e770ff647c69cbe19e28528877fba1b",
      "to": "0x9008d19f58aabd9ed0d60971565aa8510560ab41",
      "data": "0x13d79a0b000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000f80000000000000000000000000000000000000000000000000000000000000000900000000000000000000000063b420fb3294ba1d300ce5d3ba4bbca0f4fe5e3b0000000000000000000000006602e9319f2c5ec0ba31ffcdc4301d7ef03b709e000000000000000000000000826180541412d574cf1336d22c0c0a287822678a000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d7c1eb0fe4a30d3b2a846c04aa6300888f087a5f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000826180541412d574cf1336d22c0c0a287822678a000000000000000000000000d7c1eb0fe4a30d3b2a846c04aa6300888f087a5f0000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000b03be4f33de3117a20000000000000000000000000000000000000000000001dbdaf552b2e610f9620000000000000000000000000000000000004aaa0d413df15c88a41958d3500500000000000000000000000000000000000000000002d6d05933e23134fa4940000000000000000000000000000000000000000000000001a70d5fdd2071474f00000000000000000000000000000000000000000002d6d05933e23134fa4940000000000000000000000000000000000000000000003c97e632500fe652a7f400000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000008c00000000000000000000000000000000000000000000000000000000000000a8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000d0dfd95ccd6e070eda7e153a54fb67f0628ba26c00000000000000000000000000000000000000000000281af54148361a9400000000000000000000000000000000000000000000000000000c20964c235c076b00000000000000000000000000000000000000000000000000000000657c0368e9f29ae547955463ed535162aefee525d8d309571a2b18bc26086c8c35d781eb000000000000000000000000000000000000000000000020f66db0a5202c0000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000281af54148361a9400000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004176b5974825abcbf26f0e2312e950444ca46758a8e41df942369d5b1395c630b40e1b1e728d4589f16fff33287cfae3922c81e004bef6207d1a733f51a8da45741c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000080000000000000000000000006aeef86bb8742c6739639634f64ec8d98d6b835800000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000000000000000000000000003af311dd167044bb7b3800000000000000000000000000000000000000000000000000000000657bf182351173d8df3ae67ecd9202256c01a4ccbaf71234af377033ba8e9c53af6835460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000004d86aeef86bb8742c6739639634f64ec8d98d6b83585fd7e97dc078f884a2676e1345748b1feace7b0abee5d00ecadb6e574dcdd109a63e8943d5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000826180541412d574cf1336d22c0c0a287822678a000000000000000000000000d7c1eb0fe4a30d3b2a846c04aa6300888f087a5f0000000000000000000000006aeef86bb8742c6739639634f64ec8d98d6b835800000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000000000000000000000000003af311dd167044bb7b3800000000000000000000000000000000000000000000000000000000657bf182351173d8df3ae67ecd9202256c01a4ccbaf71234af377033ba8e9c53af6835460000000000000000000000000000000000000000000000000000000000000000f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677500000000000000000000000000000000000000000000000000000000000000005a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc95a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc90000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006cf1e9ca41f7611def408122793c358a3d11e5a500000000000000000000000000000000000000000000000000000018c6c0264000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000826180541412d574cf1336d22c0c0a287822678a000000000000000000000000d7c1eb0fe4a30d3b2a846c04aa6300888f087a5f0000000000000000000000006aeef86bb8742c6739639634f64ec8d98d6b835800000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000000000000000000000000003af311dd167044bb7b380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000004b00000000000000000000000000000000000000000000000000000000000000000351173d8df3ae67ecd9202256c01a4ccbaf71234af377033ba8e9c53af68354600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000030000000000000000000000002f45724d7e384b38d5c97206e78470544304887f000000000000000000000000000000000000000000000000989cd478134caef300000000000000000000000000000000000000000000000000000005b06a600d00000000000000000000000000000000000000000000000000000000ffffffff15f7794a143d0e5d3217190e3baeac63e6f76c816b10b9a6b89fcb915164d281000000000000000000000000000000000000000000000000000b05401dff510d0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000989cd478134caef30000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000002840a50cf069e992aa4536211b23f286ef8875218740a50cf069e992aa4536211b23f286ef88752187000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000009afd9f0c276b40411a4ca6a53dfa7e3d832cd66f0000000000000000000000000000000000000000000008f63ce03c890736f2a0000000000000000000000000000000000000000000000000000000013e4ab2da00000000000000000000000000000000000000000000000000000000657bf3f8db47033948acea8674bb2501bc6d2908d3cdf86eb9262a8585466e877e4ecd89000000000000000000000000000000000000000000000002ca36c150997d600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008f63ce03c890736f2a000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000041da7fefd12133c5dd85ac4ca604a517de4dcf526d7fb9e363ad8eb4c9b4f2e57d0e5b72ca03e2e2ec68d7486060c42802e01d42b7366fc64c6bdbd751cae6624e1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000022e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000040a50cf069e992aa4536211b23f286ef887521870000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000044c84c1c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008a00000000000000000000000000000000000000000000000000000000000000a400000000000000000000000000000000000000000000000000000000000000ca00000000000000000000000000000000000000000000000000000000000000e400000000000000000000000000000000000000000000000000000000000000f60000000000000000000000000000000000000000000000000000000000000102000000000000000000000000000000000000000000000000000000000000014c00000000000000000000000000000000000000000000000000000000000001580000000000000000000000000000000000000000000000000000000000000164000000000000000000000000000000000000000000000000000000000000018a000000000000000000000000000000000000000000000000000000000000019600000000000000000000000000000000000000000000000000000000000001b200000000000000000000000000000000000000000000000000000000000001c800000000000000000000000000000000000000000000000000000000000001ee000000000000000000000000000000000000000000000000000000000000020c0000000000000000000000000beb09000fa59627dc02bb55448ac1893eaa501a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000060424a305f20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000657beebe0000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab410000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003400000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000051c72848c68a965f66fa7a88855f9f7784502a7f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000003187e072c1b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000989cd478134caef300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000005cd98afdffba48f1c1f9d272578cfc682e24d59bbbf341683dced64b5088822638e46a344dd1c2aa35d76c624fcd6720eeb1bb79bfe1a2b8e9838f31de532c438ed7d6461b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000006602e9319f2c5ec0ba31ffcdc4301d7ef03b709e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000027100000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000008f63ce03c890736f27a00000000000000000000000000000000000000000000000022b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c452bbbe2900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000000000000000000000000000000000000f0000000000af15e6cbe19e30be827f27069cf010b57ce9f3ae0002000000000000000004d30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000b3cea2601d204400000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b81d678ffb9c0263b24a97847620c99d213eb14000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f40000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000c65e538006d384d0000000000000000000000000000000000000000000000000000000078b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005426178799ee0a0181a89b4f57efddfab49941ec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000845b41b90800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042daef9a502b9790000000000000000000000000000000000000000000000000000000028b000000000000000000000000000000000000000000000000000000000000000000000000000000000000008775ccb6674d6bdceb0797c364c2653ed84f38400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002438e9922e000000000000000000000000000000000000000000000000000221b262dd800000000000000000000000000000000000000000000000000000000000000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000404945bcec90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000003000000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010008775ccb6674d6bdceb0797c364c2653ed84f3840002000000000000000004f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000bdf1d19bac30b5800000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000079c58f70905f734641735bc61e45c19dd9ad60bc0000000000000000000004e700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000079c58f70905f734641735bc61e45c19dd9ad60bc000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000bdf1d19bac30b580000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff8bf000000000000000000000000000000000000000000000000000000000000000000000000000000000000008775ccb6674d6bdceb0797c364c2653ed84f38400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002438e9922e000000000000000000000000000000000000000000000000000aa87bee5380000000000000000000000000000000000000000000000000000000000000000000000000000000000096646936b91d6b9d7d0c47c496afbf3d6ec7b6f800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002438e9922e000000000000000000000000000000000000000000000000000221b262dd800000000000000000000000000000000000000000000000000000000000000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c452bbbe2900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d70000000000000000000000000000000000000000000000000000000000f000000000096646936b91d6b9d7d0c47c496afbf3d6ec7b6f80002000000000000000000190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000001618e2c8343630c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096646936b91d6b9d7d0c47c496afbf3d6ec7b6f800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002438e9922e000000000000000000000000000000000000000000000000000aa87bee53800000000000000000000000000000000000000000000000000000000000000000000000000000000000bbf1ee38152e9d8e3470dc47947eaa65dca94913000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000124c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000b14d25fe99ce1e0000000000000000000000000000000000000000000000000000000006b00000000000000000000000000000000000000000000000000000000000000000003cc02aaa39b223fe8d0a0e5c4f27ead9083c756cc211a653ddfbb61e0feff5484919f06d9d254bf65fa0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000831bf48183b999fde45294b14b55199072f0801b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c475d39ecb0000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000377936629f03f34000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d250000000000000000000000000000000000000000000000000000000021c0000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c452bbbe2900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e2000000000000000000000000000000000000000000000000000000000000000000f000000000040f1cb91325dd8ef24dfac085c9ba46ea309e5e2000200000000000000000644000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b420fb3294ba1d300ce5d3ba4bbca0f4fe5e3b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000281af54148361a94000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab4100000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000035dea0e8d91c9800f9000000000000000000000000000000000000000000003c9000000000000000000000000000000000000000000000000000000000000000000000000000000042826180541412d574cf1336d22c0c0a287822678a000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb8d7c1eb0fe4a30d3b2a846c04aa6300888f087a5f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000242e1a7d4d0000000000000000000000000000000000000000000000000e204038c7e0f68e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c70ae",
      "gasLimit": 5000000,
      "value": "0",
      "blockNumber": 18789653,
      // happened at timestamp 1702617167
    });

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: SimulationResponse = serde_json::from_slice(res.body()).unwrap();

    assert!(body.success);

    // Now let's simulate as if we had the timestamp of the next block.
    json.as_object_mut()
        .unwrap()
        .insert("blockTimestamp".into(), serde_json::json!(1702617179));

    let res = warp::test::request()
        .method("POST")
        .path("/simulate")
        .json(&json)
        .reply(&filter)
        .await;

    assert_eq!(res.status(), 200);

    let body: SimulationResponse = serde_json::from_slice(res.body()).unwrap();

    // Due to smart contract logic dependent on the timestamp the same transaction fails
    // when we use the timestamp of the next block.
    assert!(!body.success);
}
